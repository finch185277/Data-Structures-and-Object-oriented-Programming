Dear all,

Although you have joined the final exam,
it doesn't mean that this is the end of the semester.
There is still a final project for you to implement.
Specifically, in this project, you have to implement a red black tree (class)
to store the patients' data in a hospital.
As you get from the previous homework,
each row indicates the index (key), gender, height, and weight of a patient.
The goal is to retrieve data from the tree efficiently.
Do your best to make the algorithm as fast as possible.
However, using the STL library is not allowed.
You can start your program by imitating the form in the previous homework,
I will release the main.cpp file
and the relative header files as soon as possible.



Similarly, the performance is very important in this homework,
you will get only 80% of the scores if your program can retrieve
all the test data correctly.
The performance score 20% should be earned by making your program fast!
In other words,
you get full 20% if your program is the fastest among the homeworks;
but get 0% if it is the slowest. The performance score of a program,
in which its performance is in between the fastest and the slowest,
will be determined by linear interpolation.


Note that the deadline of this final project is 6/30,
and it is a hard deadline. You can't delay your homework submission by the time.

Added at 6/21:

The main.cpp file has been uploaded.
The goal is to generate test data for HW4.
Since the key generated by a random function can be identical
to a previously generated key, in the implementation,
you have to check whether this situation occurs.
In other words, all previoulsy keys are stored in an RB tree,
so as to query a key efficiently. In this homework,
you can define your own RBtree.h without any limitation.
But you cannot change the codes in the main.cpp.

Newly Added at 6/24:

The main.cpp file is updated.
You have to return only one bool value instead of pair<int, bool>
while inserting node into RBTree.
please contact TAs if you have any questions.


Good luck!
YuShuen
